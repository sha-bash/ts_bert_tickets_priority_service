version: '3.10'

networks:
  dev_network:
    driver: bridge

services:
  fastapi_app:
    build: .
    container_name: fastapi_app
    env_file:
      - .env
    ports:
      - "8080:80"
    environment:
      # Database
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: api_db
      POSTGRES_PORT: 5432

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
    networks:
      - dev_network
    depends_on:
      api_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/status"]
      interval: 15s
      timeout: 10s
      retries: 10
    restart: unless-stopped

  api_db:
    image: postgres:16.2-alpine3.19
    container_name: postgres_db
    env_file: .env
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - dev_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - dev_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - redis_data:/data
    restart: unless-stopped

  celery_worker:
    build: .
    container_name: celery_worker
    command: celery -A worker worker --loglevel=info
    env_file:
      - .env
    environment:
      # Database
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: api_db
      POSTGRES_PORT: 5432

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      api_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dev_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
